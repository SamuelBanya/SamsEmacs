Sam's Emacs Config
* Garbage Collector Speed Trick
#+begin_src emacs-lisp
;; This is to set the garbage collector to speedup the entire Emacs config startup time
;; and must go at the beginning of the config itself:
(setq gc-cons-threshold 100000000)
(add-hook 'after-init-hook (lambda () (setq gc-cons-threshold 800000)))
#+end_src
* Personal Specific
** Add Org Capture templates for personal use ('Things To Do (NOW)', YouTube videos I found, etc)
#+begin_src emacs-lisp
  (when (member (system-name) '("notestation" "fossastation"))
    (setq org-capture-templates
	  ;; Things To Do (NOW):
	  '(("n" "Things To Do (NOW) Capture Template" entry
	     (file+headline "~/hub/notes_private/life.org" "Things To Do (NOW)")
	     "** %^{Status} [#%^{Priority}] %^{Task Title} :%^{Tag}: \n*** Notes:\n%U: %^{Description}")
	    ("l" "Things To Do (LATER) Capture Template" entry
	     (file+headline "~/hub/notes_private/life.org" "Things To Do (LATER)")
	     "** %^{Status} [#%^{Priority}] %^{Task Title} :%^{Tag}: \n*** Notes:\n%U: %^{Description}"))))
	    ;; Latest attempt to add current week entry (Didn't work):
	    ;; ("c" "Completed Task Capture Template" entry
	     ;; (file+headline "~/hub/notes_private/life.org" , "* COMPLETED_TASKS: " , (format-time-string "%Y") , "** Week of "  (format-time-string "%m-%d-%Y"))
	     ;; "** %^{Status} [#%^{Priority}] %^{Task Title} :%^{Tag}: \n*** Notes:\n%U: %^{Description}"))))
  ;; 1. Determine how to somehow evaluate the following type of headline to place it in the correct 'COMPLETED_TASKS' headline
  ;; Goal: 'COMPLETED_TASKS: (current year)'
  ;; 2. Determine the current week headline
  ;; Goal: '** Week of (current_date, ex: '11-02-2021')'
  ;; 3. Prompt the user for the youtube link via the same exact '' function I use later in the Emacs config
  ;; Goal: User gets prompted for the link, the link is returned with with the name of the video and the link
  ;; in parentheses
  ;; NOTE: The following is commmented out while I think about how to do this:
  ;; (("y" "YouTube Video Capture Template" entry
  ;; (file+headline "~/hub/notes_private/life.org" "Things To Do (LATER)")
  ;;"** %^{Status} [#%^{Priority}] %^{Task Title} :%YouTube_Video: \n*** Notes:\n%U: %^{Description}"))

#+end_src
** Add Hydra to connect to different servers ("musimatic.xyz", "sambanya.com", "fedoraserver")
#+begin_src emacs-lisp
  (when (member (system-name) '("notestation" "fossastation" "Samuels-MBP.tampabay.rr.com"))
    ;; Create separate connection based functions to later call within the 'hydra-connect' hydra:
    (defun ssh-into-musimatic-sam ()
      (interactive)
      (find-file "/ssh:sam@musimatic.xyz:/var/www/musimatic"))

    (defun ssh-into-musimatic-git ()
      (interactive)
      (find-file "/ssh:git@musimatic.xyz:/var/www/musimatic"))

    (defun ssh-into-musimatic-root ()
      (interactive)
      (find-file "/ssh:root@musimatic.xyz:/var/www/musimatic"))

    (defun ssh-into-sambanya-sam ()
      (interactive)
      (find-file "/ssh:sam@sambanya.com:/var/www/sambanya"))

    (defun ssh-into-sambanya-root ()
      (interactive)
      (find-file "/ssh:root@sambanya.com:/var/www/sambanya"))

    (defun ssh-into-homebase-sam ()
      (interactive)
      (find-file "/ssh:sam@homebase:/media/REDHDD"))

    (defhydra hydra-connect (:color pink
				    :hint nil)
      "
    ^Connect^
    ^^^^^^^^^^-----------------------------
    _a_: connect to musimatic.xyz as sam user
    _b_: connect to musimatic.xyz as git user
    _c_: connect to musimatic.xyz as root user
    _d_: connect to sambanya.com as sam user
    _e_: connect to sambanya.com as root user
    _f_: connect to homebase as sam user
    _q_: quit
    "
      ("a" ssh-into-musimatic-sam)
      ("b" ssh-into-musimatic-git)
      ("c" ssh-into-musimatic-root)
      ("d" ssh-into-sambanya-sam)
      ("e" ssh-into-sambanya-root)
      ("f" ssh-into-homebase-sam)
      ("q" nil))

    (global-set-key (kbd "M-n") 'hydra-connect/body))
#+end_src
** Set 'auth-sources' for IRC config for personal computer
#+begin_src emacs-lisp
  (when (member (system-name) '("notestation" "fossastation"))
    (setq auth-sources '((:source "~/.authinfo" :host t :port t))))
#+end_src
** Add 'erc' for IRC communication
#+begin_src emacs-lisp
  (when (member (system-name) '("notestation" "fossastation"))
    (use-package erc
      ;; Parts borrowed from this post:
      ;; https://www.reddit.com/r/emacs/comments/8ml6na/tip_how_to_make_erc_fun_to_use/
      :ensure t
      :config
      (setq erc-track-exclude-types
            '("JOIN" "KICK" "NICK" "PART" "QUIT" "MODE" "333" "353"))
      (setq erc-autojoin-channels-alist '(("libera.chat" . ("#emacs"))))
      (setq erc-autojoin-mode t)
      (setq erc-button-buttonize-nicks nil)
      (setq erc-common-server-suffixes
            '(("libera.chat" . "LC")
              ("oftc.net\\'" . "OFTC")))
      (setq erc-join-buffer 'bury)
      (setq erc-log-insert-log-on-open t)
      (setq erc-log-write-after-insert t)
      (setq erc-log-write-after-send t)
      (setq erc-mode-line-format "%%b %a")
      (setq erc-modules
            '(autojoin button completion fill irccontrols list log match menu move-to-prompt netsplit networks noncommands readonly ring services stamp track))
      (setq erc-prompt-for-nickserv-password nil)
      (setq erc-prompt-for-password nil)
      (setq erc-scrolltobottom-mode t)
      (setq erc-track-faces-priority-list
            '(setq erc-error-face erc-current-nick-face erc-keyword-face erc-pal-face erc-nick-msg-face erc-direct-msg-face erc-dangerous-host-face erc-fool-face erc-input-face))
      (setq erc-track-position-in-mode-line t)
      (setq erc-track-priority-faces-only nil)
      ;; Force ERC to not prompt for a password and to look for ~/.authinfo:
      (setq erc-prompt-for-password nil)
      (setq erc-prompt-for-nickserv-password nil))

    (defun my-erc-libera ()
      "Start ERC on Libera."
      (interactive)
      (erc-tls :server "irc.libera.chat" :port "6697" :nick "Shortstop"))

    (defun my-erc-mode-hook ()
      "Hook for erc-mode."
      (setq-local scroll-conservatively 1000))

    (add-hook 'erc-mode-hook 'my-erc-mode-hook))
#+end_src
** Add font specific changes for personal machines
#+begin_src emacs-lisp
    (when (member (system-name) '("notestation" "fossastation"))
      (set-face-attribute 'default nil
                          :height (pcase (system-name)
                                    ("notestation" 125)
                                    ("fossastation" 125))))
#+end_src
* Work Specific
** Org-Capture templates for Zendesk tickets and Intercom chats
#+BEGIN_SRC emacs-lisp
  (when (string= system-name "Samuels-MBP")
    (setq org-capture-templates
	  ;; Using backtick to allow for 'format-time-string' to be escaped:
	  `(("a" "OPEN Ticket Capture Template" entry
	     (file+headline "~/hub/worknotes_snyk/TodoList/TodoList(2022).org" "Open Tasks")
	     "** OPEN [#%^{Severity}] Ticket #%^{Ticket Number} with %^{Client's First Name} from %^{Company Name} :%^{Snyk Product}: \n*** Link\n- https://snyk.zendesk.com/agent/tickets/%^{Ticket Number}\n*** Notes\n**** Initial Notes\n%U: %^{Current Status}\n*** Result")
	    ("x" "PENDING Capture Template" entry
	     (file+headline "~/hub/worknotes_snyk/TodoList/TodoList(2022).org" "Pending Tasks")
	     "** PENDING [#%^{Severity}] Ticket #%^{Ticket Number} with %^{Client's First Name} from %^{Company Name} :%^{Snyk Product}: \n*** Link\n- https://snyk.zendesk.com/agent/tickets/%^{Ticket Number}\n*** Notes\n**** Initial Notes\n%U: %^{Current Status}\n*** Result")
	    ("1" "DONE Ticket Capture Template" entry
	     (file+headline "~/hub/worknotes_snyk/TodoList/TodoList(2022).org" (concat "COMPLETED: " (format-time-string "%b %Y")))
	     "** DONE [#%^{Severity}] Ticket #%^{Ticket Number} with %^{Client's First Name} from %^{Company Name} :%^{Snyk Product}: \n*** Link\n- https://snyk.zendesk.com/agent/tickets/%^{Ticket Number}\n*** Notes\n**** Initial Notes\n%U: %^{Current Status}\n*** Result\n%^{Result}")
	    ("i" "Intercom Chat Capture Template" entry
	     (file+headline "~/hub/worknotes_snyk/TodoList/TodoList(2022).org" "Intercom Tasks")
	     "** IN-PROGRESS Support Chat with %^{Client's First Name} from %^{Company Name} :Intercom_Chat: \n*** Notes\n**** Initial Notes\n%U: %^{Current Status}\n*** Result")
	    ("m" "Meeting Capture Template" entry
	     (file+headline "~/hub/worknotes_snyk/TodoList/TodoList(2022).org" , (format-time-string "%b %Y"))
	     "** %^{Meeting Name} (%<%a %m-%d-%Y>)\n%U: %^{Current Status}" :clock-in t :clock-resume t))))
	    ;; DRAFT: Placing in comments to figure out how to do this
	    ;; ("c" "Convert Intercom Chat To Zendesk Ticket Capture Template" entry
	    ;; (file+headline "~/hub/worknotes_snyk/TodoList/TodoList(2021).org" "Open Tasks")
	    ;; TODO: Figure out how to find the headline of the current Intercom chat task in 'Intercom Tasks'
	    ;; TODO: Then, figure out how to change 'Support Chat' to: 'Ticket #' instead
	    ;; TODO: Prompt the user for the client's company name as this will be needed for Zendesk itself most likely
	    ;; "** %^{Meeting Name} (%<%a %m-%d-%Y>)\n%U: %^{Current Status}" :clock-in t :clock-resume t)

#+END_SRC
** 'Option' MacOS Key + Return to launch 'vterm'
#+BEGIN_SRC emacs-lisp
  (when (string= system-name "Samuels-MBP.tampabay.rr.com")
    (global-set-key (kbd "<A-return>") 'vterm))
#+END_SRC
** Add font specific changes for work Macbook to make it larger because default Mac font size sucks
#+begin_src emacs-lisp
  (when (string= system-name "Samuels-MBP.tampabay.rr.com")
    (set-face-attribute 'default nil
                        :height (pcase (system-name)
                                  ("Samuels-MBP.tampabay.rr.com" 140))))
#+end_src
* Keybinding Changes
** Add related hydra to remind me of all the super custom specific keybindings I have ever made
#+begin_src emacs-lisp
  ;; (defhydra hydra-remindkeys (:color pink
  ;; 			       :hint nil)
  ;;   "
  ;; ^Keybindings^
  ;; ^^^^^^^^^^-----------------------------
  ;; _C-M-z_: Enable 'evil' and 'evil-collection' for Vim keybindings
  ;; _S-Return_: launch 'vterm'
  ;; _C-x w_: launch 'ranger.el'
  ;; _f12_: toggle full screen for Macbook workaround
  ;; _C-=_: rotate buffers
  ;; _f7 and S-f7_: start 'org-tree-slide-mode' for Org Mode based presentations, and stop them
  ;; _f6_: insert YouTube video link, and return the YouTube video name into pasted buffer
  ;; _C-x b_: enable iBuffer to check available buffers
  ;; _f2_: enable zoom-based Hydra to zoom in and out of available Emacs buffer
  ;; _C-c a_: enable 'Org-Agenda' to view agenda of tasks
  ;; _C-!_: enable color-theme based Hydra to change color themes on the fly
  ;; _M-s_: jump to a specific word in a buffer with the 'avy-goto-word-0' function
  ;; _M-l_: jump to a specific line in a buffer with the 'avy-goto-line' function
  ;; _M-y_: view the copy and paste clipboard via 'popup-kill-ring' package
  ;; _C-s_: search in a buffer with Counsel or Swiper via the 'counsel-grep-or-swiper' function
  ;; _C-c q_: first mark a section of a buffer, and then enable this to see where the highlighted section appears next to edit all instances simultaneously
  ;; _C-q_: enables 'expand-region' to expand a given region of text
  ;; _C-c C-0_: enables multiple cursors with 'mc/edit-lines' function
  ;; _C->_: while 'mc/edit-lines' is enabled, go to the next line
  ;; _C-<_: while 'mc/edit-lines' is enabled, go to the previousline
  ;; _C-c C-<_: while 'mc/edit-lines' is enabled, mark all of the lines that are like this
  ;; _C-M-s-k_: kill all buffers with 'kill-all-buffers' function, useful for end-of-day buffer cleanup
  ;; _C-c w l_: copy the entire line of text with 'copy-whole-line' function
  ;; _C-x k_: kill the current buffer with the 'kill-current-buffer' function
  ;; _s-e_: edit the buffer as the 'sudo' user with the 'sudo-edit' function
  ;; _C-c w w_: kill an entire word with the 'kill-whole-word' function
  ;; _C-$_: enable desktop based hydra to save, clear, or revert the current desktop of Emacs buffers via the 'hydra-desktop' hydra
  ;; _C-c l_: enable lsp-mode for programming based auto-completion
  ;; _<s tab_: enable source code based yasnippet template for Org Mode
  ;; _<b tab_: enable bash code based yasnippet template for Org Mode
  ;; _C-h M-a_: show the major mode keybindings with the 'discover-my-major' function
  ;; _C-h M-o_: show the minor mode keybindings with the 'discover-my-mode' function
  ;; _M-x free-keys_: show the available keybindings to use for later use in my Emacs config
  ;; _C-c e_: edit Emacs config at any time
  ;; _C-c r_: reload Emacs config at any time
  ;; _C-c C-p C-b_: add the entire current buffer to an online webpaste, specifically at dpaste.org
  ;; _C-c C-p C-r_: add the selected region to an online webpaste, specifically at dpaste.org
  ;; _C-c C-p C-p_: add the selected region or buffer to an online webpaste, specifically at dpaste.org
  ;; _C-c s_: search for a specific issue on Stack Exchange aka StackOverflow
  ;; _M-x ytdl_: download YouTube videos directly from Emacs
  ;; _C-c m_: enable Org-Menu to discover keybindings in Org Mode
  ;; _C-c t_: enable treemacs and lsp-treemacs-errors-list
  ;; _M-`_: enable popper-toggle-latest to toggle latest popper buffer
  ;; _M-~_: enable popper-cycle to cycle through popper buffers
  ;; _C-x M-`_: enable popper-toggle-latest to toggle the type of popper buffer
  ;; _C-|_: call kill-all-dired-buffers function to kill all open dired buffers

  ;; "
  ;;   ("q" nil))

  ;; (global-set-key (kbd "C-=") 'hydra-rotate/body)
#+end_src
** Add 'evil' and 'evil-collection' to switch to Vim keybindings for programming occassionally with 'C-M-z'
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    ;; Allow Vim style page-up and page-down functionality with 'C-u' and 'C-d':
    (setq evil-want-C-u-scroll t))

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))

  (global-set-key (kbd "C-M-z") 'evil-mode)
#+END_SRC
** Super+Return to launch 'vterm'
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<s-return>") 'vterm)
#+END_SRC
** Add '<f12>' keybinding for 'toggle-frame-fullscreen' function for Macbook workaround
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f12>") 'toggle-frame-fullscreen)
#+END_SRC
** Hydra for rotating buffers with 'C-='
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-rotate (:color pink
				 :hint nil)
    "
  ^Rotate Buffers^
  ^^^^^^^^^^-----------------------------
  _h_: rotate even horizontal
  _v_: rotate even vertical
  _o_: rotate main horizontal
  _e_: rotate main vertical
  _t_: rotate tiled
  _q_: quit
  "
    ("h" rotate:even-horizontal)
    ("v" rotate:even-vertical)
    ("o" rotate:main-horizontal)
    ("e" rotate:main-vertical)
    ("t" rotate:tiled)
    ("q" nil))

  (global-set-key (kbd "C-=") 'hydra-rotate/body)
#+END_SRC
** Use 'get-youtube-video-name' to grab YouTube video name from YouTube link provided by user and place into buffer, set to '<f6>'
#+BEGIN_SRC emacs-lisp
  (defun get-youtube-video-name ()
    "Grab the video title of a YouTube video using youtube-dl, and place it into an Emacs buffer."
    (interactive)
    (insert
    (shell-command-to-string
     (concat "youtube-dl --get-filename -o '%(title)s' $1"
		  (shell-quote-argument
		   (read-string "Enter your YouTube link here: "))))))
  (global-set-key (kbd "<f6>") 'get-youtube-video-name)
#+END_SRC
** iBuffer Via 'C-x b'
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-x b") 'ibuffer)
   #+END_SRC
** Enable iBuffer Expert Mode To Instantly Killer Buffers With 'D'
   #+BEGIN_SRC emacs-lisp
   (setq ibuffer-expert t)
   #+END_SRC
** Switch Buffers Using 'ivy-switch-buffer' With 'C-x C-b'
#+begin_src emacs-lisp
    (global-set-key (kbd "C-x C-b") 'ivy-switch-buffer)
#+end_src
** Hydra for zooming in and out of buffers with 'f2'
   #+BEGIN_SRC emacs-lisp
   (defhydra hydra-zoom (global-map "<f2>")
   "zoom"
   ("g" text-scale-increase "in")
   ("l" text-scale-decrease "out"))
   #+END_SRC
** 'C-c a' for Org-Agenda Keybinding
   #+BEGIN_SRC emacs-lisp
   (global-set-key "\C-ca" 'org-agenda)
   #+END_SRC
* Useful Packages And QOL Changes To Make Emacs Better
** UI
*** Add 'gruvbox' themes from MELPA
#+begin_src emacs-lisp
  (use-package gruvbox-theme
    :ensure t)
#+end_src
*** Color Theme
   Load color theme, and do 'org-restart' to make sure the theme loads correctly:
   #+BEGIN_SRC emacs-lisp
     ;; (load-theme 'wordperfect-plus-emacs)
     ;; (load-theme 'kojak-emacs)
     ;; (load-theme 'super-nintendo-emacs)
     (load-theme 'morrowind)
     ;; (load-theme 'kirby-emacs)
     ;; (load-theme 'gruvbox-dark-hard)
     ;; (load-theme 'base16-bespin t)
     (org-mode-restart)
   #+END_SRC
*** Highlight Current Line In GUI Version Of Emacs
   #+BEGIN_SRC emacs-lisp
   (when window-system (add-hook 'prog-mode-hook (lambda() (set-face-background 'highlight "#222") (hl-line-mode 1))))
   (when window-system (add-hook 'text-mode-hook (lambda() (set-face-background 'highlight "#222") (hl-line-mode 1))))
   #+END_SRC
*** Disable Default Tool Bar, Menu Bar, And Scroll Bar
   #+BEGIN_SRC emacs-lisp
   ;; Disable default GUI based UI to allow more focus on the editor itself:
   (tool-bar-mode -1)
   (menu-bar-mode -1)
   (scroll-bar-mode -1)
   #+END_SRC
*** Dashboard
   #+BEGIN_SRC emacs-lisp
     (use-package dashboard
       :ensure t
       :config
       (dashboard-setup-startup-hook)
       (setq dashboard-items '((recents . 10)))
       (setq dashboard-banner-logo-title "Hello! Welcome to Emacs, have a fun time!"))
   #+END_SRC
*** Rainbow-Mode
#+BEGIN_SRC emacs-lisp
     (use-package rainbow-mode
       :ensure t
       :hook prog-mode
       :config
       (rainbow-mode))
#+END_SRC
*** Beacon
   #+BEGIN_SRC emacs-lisp
   (use-package beacon
   :ensure t
   :init
   (beacon-mode 1))
   #+END_SRC
*** Enable 'scroll-conservatively' to allow for sane scroll defaults at the bottom of a buffer instead of default jumping behavior
   #+BEGIN_SRC emacs-lisp
   (setq scroll-conservatively 100)
   #+END_SRC
*** Disable annoying default bell for warning messages:
   #+BEGIN_SRC emacs-lisp
   (setq ring-bell-function 'ignore)
   #+END_SRC
*** Which-Key
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :defer 5
       :ensure t
       :config
       (which-key-mode))
   #+END_SRC
*** Avy: Use 'M-s' for 'avy-goto-word-0', and use 'M-l' for 'avy-goto-line'
   #+BEGIN_SRC emacs-lisp
     (use-package avy
       :ensure t
       :bind
       ("M-s" . avy-goto-word-0)
       ("M-l" . avy-goto-line))
   #+END_SRC
*** 'popup-kill-ring' to interactively obtain kill ring paste buffer
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind("M-y" . popup-kill-ring))
#+END_SRC
*** Swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t)
    ;; :bind ("C-s" . swiper))
#+END_SRC
*** 'mark-multiple' to mark multiple sections of the buffer
#+BEGIN_SRC emacs-lisp
  (use-package mark-multiple
    :ensure t
    :bind ("C-c q" . 'mark-next-like-this))
#+END_SRC
*** 'expand-region' to expand the current highlighted region, useful in conjunction with 'mark-multiple'
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-q" . er/expand-region))
#+END_SRC
*** Add 'goto-line-preview' to replace default 'goto-line' Emacs function
#+BEGIN_SRC emacs-lisp
  (use-package goto-line-preview
    :ensure t)

  (global-set-key [remap goto-line] 'goto-line-preview)
#+END_SRC
*** Add 'visual-regexp' to easily view soon-to-be replaced text with 'vr/replace' and 'vr/query command
#+BEGIN_SRC emacs-lisp
  (use-package visual-regexp
    :ensure t)
#+END_SRC
*** Show lines and columns on the modeline
   #+BEGIN_SRC emacs-lisp
     (line-number-mode 1)
     (column-number-mode 1)
   #+END_SRC
*** Show clock in 24-hr format, and display date + time
   #+BEGIN_SRC emacs-lisp
     (setq display-time-24hr-format t)
     (setq display-time-day-and-date t)
     (display-time-mode 1)
   #+END_SRC
*** Change 'yes or no' prompt to just 'y or n':
   #+BEGIN_SRC emacs-lisp
   (defalias 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
*** Add 'switch-window' to use 'C-o' plus Vim style keys to quickly switch buffers to the desired on-screen buffer
   #+BEGIN_SRC emacs-lisp
     (use-package switch-window
       :ensure t
       :config
       (setq switch-window-input-style 'minibuffer)
       (setq switch-window-increase 4)
       (setq switch-window-threshold 2)
       (setq switch-window-shortcut-style 'qwerty)
       (setq switch-window-querty-shortcuts
       '("a" "s" "d" "f" "h" "j" "k" "l"))
       :bind
       ([remap other-window] . switch-window))
   #+END_SRC
*** Window Splitting Functions (Horizontal And Vertical)
#+BEGIN_SRC emacs-lisp
(defun split-and-follow-horizontally ()
  (interactive)
  (split-window-below)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

(defun split-and-follow-vertically ()
  (interactive)
  (split-window-right)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
*** Enable Subword-Mode so that you can go forward and backward between camel-case words
   #+BEGIN_SRC emacs-lisp
     (global-subword-mode 1)
   #+END_SRC
*** Always kill current buffer function
   #+BEGIN_SRC emacs-lisp
     (defun kill-current-buffer()
       (interactive)
       (kill-buffer (current-buffer)))

     (global-set-key (kbd "C-x k") 'kill-current-buffer)
   #+END_SRC
*** Enable Hungry-Delete to delete white-space character regions more easily
   #+BEGIN_SRC emacs-lisp
     (use-package hungry-delete
       :ensure t
       :config (global-hungry-delete-mode))
   #+END_SRC
*** Add visual wordwrap in every text mode
#+begin_src emacs-lisp
;; From this post:
;; https://www.reddit.com/r/emacs/comments/43vfl1/enable_wordwrap_in_orgmode/czl98d4/
(add-hook 'text-mode-hook 'turn-on-visual-line-mode)
#+end_src
*** Add 'highlight-indent-guides' to visually observe indents in a buffer
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :ensure t
    :custom
    (highlight-indent-guides-method 'character)
    (highlight-indent-guides-character ?\|))
#+end_src
*** Add 'vertico' for Helm-style autocompletion in mini-buffer
#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :init
    (vertico-mode))
#+end_src
** Terminal
*** Add 'vterm' to enable only decent Emacs terminal
#+begin_src emacs-lisp
  (use-package vterm
    :ensure t)

  ;; Configure vterm so that you can open up different instances of it so that it automatically renames new instances accordingly:
  ;; This is to prevent myself from having to use 'tmux' in order to get the same effect:
  (add-hook 'vterm-mode-hook 'rename-uniquely)
#+end_src

** Programming
*** Add 'magit' for making dealing with Git repositories easier
#+begin_src emacs-lisp
  (use-package magit
    :ensure t)
#+end_src
*** Add 'company' for auto-completion for programming projects
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :config
    (global-company-mode t)
    (setq company-idle-delay 0.0)
    (setq company-minimum-prefix-length 1)
    ;; Force Company Mode to NOT be enabled in Org Mode since its way too annoying for note taking:
    (setq company-global-modes '(not org-mode))
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    (setq lsp-completion-provider :capf)
    :hook
    (prog-mode . company-mode))
#+end_src
*** Add 'lsp-mode' for intellisense for many programming languages (python, ruby, java, C++)
#+begin_src emacs-lisp
  (defun ef/lsp-mode-setup ()
    ;; Taken from this 'System Crafters' video:
    ;; https://www.youtube.com/watch?v=E-NAM9U5JYE
    ;; This allows breadcrumb segments to appear in projects
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :ensure t
    :commands (lsp lsp-deferred)
    :hook (
           (web-mode . lsp-deferred)
           (ruby-mode . lsp-deferred)
           (python-mode . lsp-deferred)
           (lsp-mode . lsp-enable-which-key-integration)
           )
    )
#+end_src
*** Add 'lsp-ui' to adjust UI portion of LSP mode's features
#+begin_src emacs-lisp
  (use-package lsp-ui
    :ensure t
    :commands lsp-ui-mode)
#+end_src
*** Add 'lsp-python-ms' for Python projects
#+begin_src emacs-lisp
  ;; Taken from here:
  ;; https://gist.github.com/Lukewh/2da7b54cd773f931b1bf710c84f2f0fb
  (use-package lsp-python-ms
    :ensure t
    :init (setq lsp-python-ms-auto-install-server t)
    :hook (python-mode . (lambda ()
                           (require 'lsp-python-ms)
                           (lsp))))
#+end_src
*** Force 'display-line-numbers-mode' to be enabled when LSP mode is enabled
#+begin_src emacs-lisp
  (add-hook 'lsp-mode-hook #'display-line-numbers-mode)
#+end_src
*** Add 'aggressive-indent' for better indentation
#+begin_src emacs-lisp
  (use-package aggressive-indent
    :ensure t)

  ;; Adding modes to enable 'aggressive-indent' mode via hooks:
  (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
  (add-hook 'python-mode-hook #'aggressive-indent-mode)
  (add-hook 'css-mode-hook #'aggressive-indent-mode)
  (add-hook 'web-mode-hook #'aggressive-indent-mode)
  (add-hook 'rjsx-mode-hook #'aggressive-indent-mode)
  (add-hook 'js2-mode-hook #'aggressive-indent-mode)
  (add-hook 'ruby-mode-hook #'aggressive-indent-mode)
  (add-hook 'python-mode-hook #'aggressive-indent-mode)

#+end_src
*** Combined 'lsp' and 'lsp-ui' tweaks
#+begin_src emacs-lisp
  (setq lsp-keymap-prefix "C-c l")
  (setq lsp-enable-which-key-integration t)
  ;; Set 'lsp-idle-delay' to 0.2 seconds for quick autocompletion
  (setq lsp-idle-delay 0.2)
  ;; Adding this to force lsp to auto-guess the root directory of the project:
  (setq lsp-auto-guess-root t)
  ;; Force lsp mode to not log everything for speed purposes:
  (setq lsp-log-io nil)
  (setq lsp-ui-sideline-show-hover t)
  (setq lsp-ui-sideline-show-code-actions t)
  ;; Force 'lsp' mode to use 'flymake' as its diagnostics provider:
  (setq lsp-diagnostics-provider :flymake)
  ;; Enable 'lsp-ui-doc' setting:
  (setq lsp-ui-doc-enable t)
  ;; Force LSP Mode to not automatically install language servers:
  ;; Taken from here:
  ;; https://emacs-lsp.github.io/lsp-mode/page/faq/#how-do-i-disable-automatic-installation
  (setq lsp-enable-suggest-server-download nil)
#+end_src
*** Add 'counsel' to specifically use the 'counsel-grep-or-swiper' for searching through large log files
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :bind ("C-s" . counsel-grep-or-swiper))
#+END_SRC
*** Add 'rainbow-delimiters' to easily view delimiters in code
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC
*** Add 'web-mode' hooks
#+begin_src emacs-lisp
	;; Taken from here:
	;; https://gist.github.com/Lukewh/2da7b54cd773f931b1bf710c84f2f0fb
	(setq-default tab-width 2)
	(setq indent-tabs-mode nil)
	(defun sam/webmode-hook ()
		"Webmode hooks."
		(setq web-mode-enable-comment-annotation t)
		(setq web-mode-markup-indent-offset 2)
		(setq web-mode-code-indent-offset 2)
		(setq web-mode-css-indent-offset 2)
		(setq web-mode-attr-indent-offset 0)
		(setq web-mode-enable-auto-indentation t)
		(setq web-mode-enable-auto-closing t)
		(setq web-mode-enable-auto-pairing t)
		(setq web-mode-enable-css-colorization t))
#+end_src
*** Set default indent level via 'js-indent-level' variable to 2 spaces for later parts of config
#+begin_src emacs-lisp
  (setq-default js-indent-level 2)
#+end_src
*** Add 'web-mode' for HTML, JS, and TS based files (.html, .js, .jsx, .ts, .tsx, .html)
#+begin_src emacs-lisp
  (use-package web-mode
    :ensure t
    :mode (("\\.js\\'" . web-mode)
           ("\\.jsx\\'" .  web-mode)
           ("\\.ts\\'" . web-mode)
           ("\\.tsx\\'" . web-mode)
           ("\\.html\\'" . web-mode)
           ;; Taken from here:
           ;; https://gist.github.com/asummers/b8304b8ea78fc331b8177ff35d002046
           ("\\.android\\.js$" . web-mode)
           ("\\.react\\.js$" . web-mode))
    :config
    ;; Taken from here:
    ;; https://gist.github.com/asummers/b8304b8ea78fc331b8177ff35d002046
    (add-to-list 'magic-mode-alist '("^import React" . web-mode))
    (add-to-list 'magic-mode-alist '("React.Component" . web-mode))
    (add-to-list 'magic-mode-alist '("from 'react';$" . web-mode))
    :commands web-mode
    :hook (web-mode . sam/webmode-hook))

  ;; Taken from here:
  (add-hook 'web-mode-hook
            (lambda ()
              (setq web-mode-markup-indent-offset (symbol-value 'js-indent-level))
              (setq web-mode-attr-indent-offset (symbol-value 'js-indent-level))
              (setq web-mode-css-indent-offset (symbol-value 'js-indent-level))
              (setq web-mode-code-indent-offset (symbol-value 'js-indent-level))))
#+end_src
*** Add 'emmet-mode' to make HTML editing easier
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :ensure t
    :hook ((web-mode) . emmet-mode))
#+END_SRC
*** Add 'ruby-mode' for Ruby projects
#+begin_src emacs-lisp
  (use-package ruby-mode
    :ensure t)
#+end_src
*** Force 'display-line-numbers-mode' to be enabled when 'ruby mode' is enabled
#+begin_src emacs-lisp
(add-hook 'ruby-mode-hook #'display-line-numbers-mode)
#+end_src
*** Add 'enable-minor-mode' custom function from Luke Wesley-Holley
#+begin_src emacs-lisp
  ;; Taken from here:
  ;; https://gist.github.com/Lukewh/2da7b54cd773f931b1bf710c84f2f0fb
  (defun enable-minor-mode (my-pair)
    "Enable minor mode if filename match the regexp.  MY-PAIR is a cons cell (regexp . minor-mode)."
    (if (buffer-file-name)
        (if (string-match (car my-pair) buffer-file-name)
      (funcall (cdr my-pair)))))
#+end_src
*** Add 'flycheck' for programming syntax checking on-the-fly
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :hook (prog-mode . flycheck-mode))
#+END_SRC
*** Use 'Diminish' to hide amazing minor modes which are not necessary to be reminded of all the time
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'hungry-delete-mode)
    (diminish 'beacon-mode)
    (diminish 'which-key-mode)
    (diminish 'subword-mode)
    (diminish 'rainbow-mode))
#+END_SRC
*** 'yasnippet' to utilize snippet templates with 'M-x yas-describe-tables' (Note: Make sure your created snippets match mode's name, ex: '~/.emacs.d/snippets/python-mode')
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (use-package yasnippet-snippets
      :ensure t)
    ;; Taken from this SO post:
    ;; https://stackoverflow.com/questions/46696009/adding-a-custom-yasnippet-directory-to-spacemacs
    (setq yas-snippet-dirs (append yas-snippet-dirs '("~/.emacs.d/snippets")))
    (yas-reload-all))
#+END_SRC
*** Add hook so that 'yasnippet' minor mode is enabled for certain modes (programming: 'C, C++, Python, JS', 'nXML', Org-Mode)
#+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-hook 'yas-minor-mode)
  (add-hook 'c++-mode-hook 'yas-minor-mode)
  (add-hook 'python-mode-hook 'yas-minor-mode)
  (add-hook 'emacs-lisp-mode-hook 'yas-minor-mode)
  (add-hook 'org-mode-hook 'yas-minor-mode)
  (add-hook 'ruby-mode-hook 'yas-minor-mode)
  (add-hook 'js-mode-hook 'yas-minor-mode)
  (add-hook 'rjsx-mode-hook 'yas-minor-mode)
  (add-hook 'typescript-mode-hook 'yas-minor-mode)
  (add-hook 'web-mode-hook 'yas-minor-mode)
  (add-hook 'csharp-mode-hook 'yas-minor-mode)
  (add-hook 'vue-mode-hook 'yas-minor-mode)
#+END_SRC
*** Nuke Emacs 27.2's annoying issue of automatically expanding source blocks which ruins my Yasnippet override template
#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively nil)
#+END_SRC
*** Enable 'electric-pair-mode' to auto-complete / add parentheses whenever possible
#+BEGIN_SRC emacs-lisp
     (setq electric-pair-pairs '(
				 (?\( . ?\))
				 (?\[ . ?\])
				 (?\{ . ?\})
				 ))

     (electric-pair-mode t)

     ;; Disable pairing of '<' with '>' to avoid weird expansion issues in Org-Mode for Yasnippets:
     (add-function :before-until electric-pair-inhibit-predicate
		   (lambda (c) (eq c ?<)))
#+END_SRC
*** Add 'aggressive-indent' to automatically indent code
#+begin_src emacs-lisp
  (use-package aggressive-indent
    :ensure t)
#+end_src
*** Enable 'show-paren-mode' to highlight matching parentheses
#+begin_src emacs-lisp
(show-paren-mode 1)
#+end_src
*** Indent with spaces, not tabs, by nuking 'indent-tabs-mode'
#+begin_src emacs-lisp
  (progn
    (setq-default indent-tabs-mode nil)
    )
#+end_src
** Keybinding Packages
*** Add 'free-keys' to determine the free keybindings present currently available in Emacs
#+begin_src emacs-lisp
  (use-package free-keys
    :ensure t)
#+end_src
*** Add 'hydra' to do some cool keybinding macro functions
#+begin_src emacs-lisp
  (use-package hydra
    :ensure t)
#+end_src
** Counsel Related Packages
*** Install 'counsel' to get access to 'ivy' component
#+begin_src emacs-lisp
  (use-package counsel
    :ensure t)
#+end_src
*** Enable 'ivy' everywhere
#+begin_src emacs-lisp
  ;; Taken from the 'swiper' Docs page:
  ;; https://oremacs.com/swiper/
  ;; Previous Section:
  ;; (ivy-mode 1)
  ;; NOTE:
  ;; Modifying this so that it doesn't autocomplete in ERC based IRC buffers:
  (add-hook 'erc-chat-mode-hook
            (lambda ()  (ivy-mode 1)))
#+end_src
** File Manager
*** Make 'dired' less verbose aka use 'dired-hide-details-mode'
#+begin_src emacs-lisp
  ;; NOTE:
  ;; Idea Taken From 'Emacs Rocks Episode 16: Dired' But Implemented A Little Differently:
  (add-hook 'dired-mode-hook
            'dired-hide-details-mode)
#+end_src
*** Allow 'dired' to move files between panes just like 'Midnight Commander'
#+begin_src emacs-lisp
  ;; NOTE:
  ;; From 'Emacs Rocks Episode 16: Dired':
  (setq dired-dwim-target t)
#+end_src
*** Enable 'treemacs' for a tree layout file explorer
#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :custom
    (treemacs-no-png-images nil)
    (treemacs-width 35))
#+end_src
*** Enable 'treemacs-magit' to inform treemacs about staging of files and commits happening in 'magit'
#+begin_src emacs-lisp
  (use-package treemacs-magit
    :ensure t)
#+end_src
*** Enable 'lsp-treemacs' for a more IDE-looking setup via 'lsp-treemacs-symbols' and 'lsp-treemacs-errors-list'
#+begin_src emacs-lisp
  (use-package lsp-treemacs
    :ensure t
    :config
    (lsp-treemacs-sync-mode 1))
#+end_src
*** Use custom function, 'launch-treemacs-and-errors' to call 'treemacs' and 'lsp-treemacs-errors-list'
#+begin_src emacs-lisp
  (defun launch-treemacs ()
    (interactive)
    (let ((current-window (selected-window))
          (error-window (get-buffer-window "*LSP Error List*"))
          (treemacs-window (equal (treemacs-current-visibility) 'visible)))
      (if (and error-window treemacs-window)
          (progn (treemacs) (delete-window error-window))
        (treemacs)
        (select-window current-window))))

  (global-set-key (kbd "C-c t") 'launch-treemacs)
#+end_src
** eww
*** Make 'eww' the default browser for Emacs
#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'eww-browse-url)
#+END_SRC
** Org-Mode
*** Create custom 'my-org-capture' function to force 'Org-Capture' to split vertically
#+BEGIN_SRC emacs-lisp
  (defun my-org-capture (&rest args)
    (interactive)
    (let ((split-window-preferred-function 'split-window-vertically))
      (funcall 'org-capture)))

  (global-set-key (kbd "C-c c") 'my-org-capture)
#+END_SRC
*** Don't allow 'aggressive-indent' to affect Org Mode:
#+begin_src emacs-lisp
  ;; Turn on 'aggressive-indent' mode globally:
  (global-aggressive-indent-mode 1)
  ;; Add an exclusion list of modes you don't want 'aggressive-indent' to occur on:
  (add-to-list 'aggressive-indent-excluded-modes 'org-mode)
#+end_src
*** Nuke 'org-adapt-indentation' variable setting value introduced in Emacs 27.2 so lines aren't auto-indented after headlines
#+BEGIN_SRC emacs-lisp
(setq org-adapt-indentation nil)
#+END_SRC
*** Nuke 'org-startup-folded' variable setting value introduced in Emacs 27.2 so org docs aren't automatically expanded
#+BEGIN_SRC emacs-lisp
(setq org-startup-folded t)
#+END_SRC
*** Add time-tracking for Org-Mode todo item state changes to place into ':LOGBOOK:' drawer
   #+BEGIN_SRC emacs-lisp
     (setq org-log-into-drawer "LOGBOOK")
   #+END_SRC
*** Set 'org-agenda-files' variable so that Org-Mode sees all scheduled items in Org-Agenda
   #+BEGIN_SRC emacs-lisp
     (setq org-agenda-files (append
			     (file-expand-wildcards "~/hub/notes_private/*.org")))
   #+END_SRC
*** Allow Org-Mode to edit SRC blocks within the same window
   #+BEGIN_SRC emacs-lisp
   (setq org-src-window-setup 'current-window)
   #+END_SRC
*** Allow Org-Mode to use an emacs-lisp src block template
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'org-structure-template-alist
		  '("el" . "src emacs-lisp"))
   #+END_SRC
*** Remove '#' priority from tasks when changing task states
#+begin_src emacs-lisp
  ;; From a wonderful person named Samuel Loury from the Emacs Org Mode mailing list --> props to their assistance on this:
  (defun my/org-trigger-hook (change-plist)
    (let* ((type (plist-get change-plist :type))
	   (pos (plist-get change-plist :position))
	   (from (substring-no-properties (or (plist-get change-plist :from) "")))
	   (to (substring-no-properties (or (plist-get change-plist :to) "")))
	   )
      (when (and
	     (eq type 'todo-state-change)
	     (member to org-done-keywords)
	     (member from org-not-done-keywords)
	     )
	(org-priority (string-to-char " ")))))

  (add-hook #'org-trigger-hook
	    #'my/org-trigger-hook)
#+end_src
*** Destroy annoying 'bookmark-set-fringe-mark' which shows up as a weird orange mark in Org Mode
#+begin_src emacs-lisp
;; Related post on this behavior:
;; https://www.reddit.com/r/orgmode/comments/u156dd/strange_orange_marker_on_captured_tasks/
(setq-default bookmark-set-fringe-mark nil)
#+end_src
*** Add 'ox-hugo' so that I can export blog posts from Org mode to 'hugo'
#+begin_src emacs-lisp
  (use-package ox-hugo
    :ensure t
    :after ox)
#+end_src
*** Add 'org-kanban' to allow for easy kanban boards for projects
#+begin_src emacs-lisp
  ;; From here:
  ;; https://melpa.org/#/org-kanban
  (use-package org-kanban
    :ensure t)
#+end_src
*** Nuke Org Mode's use of 'electric-indent' mode which annoyingly indents list items by default
#+begin_src emacs-lisp
;; Taken from here:
;; https://www.philnewton.net/blog/electric-indent-with-org-mode/
(add-hook 'org-mode-hook
	  (lambda () (electric-indent-local-mode -1)))
#+end_src
** ediff
*** Force 'ediff' to open up vertically in new windows NOT frames
#+BEGIN_SRC emacs-lisp
(advice-add 'ediff-window-display-p :override #'ignore) ; Open up ediff results in new windows not frames
(setq ediff-split-window-function 'split-window-vertically) ; Split the ediff results vertically
#+END_SRC
** Performance Tweaks
*** Add garbage collection to make Emacs snappier
#+begin_src emacs-lisp
(add-hook 'focus-out-hook #'garbage-collect)
#+end_src
*** Use 'no-littering' package to keep '~/.emacs.d' clean
#+begin_src emacs-lisp
  (use-package no-littering
    :ensure t
    :demand t)
#+end_src
** Quality Of Life Custom Changes To Improve Default Emacs Behavior
*** Config Edit / Reload Function
**** Edit Config Function
    #+BEGIN_SRC emacs-lisp
      (defun config-edit ()
	(interactive)
	(find-file "~/hub/SamsEmacs/configuration.org"))
      (global-set-key (kbd "C-c e") 'config-edit)
    #+END_SRC
**** Reload Config Function
    #+BEGIN_SRC emacs-lisp
      (defun config-reload ()
	(interactive)
	(org-babel-load-file (expand-file-name "~/hub/SamsEmacs/configuration.org")))
      (global-set-key (kbd "C-c r") 'config-reload)
    #+END_SRC
*** Nuke Emacs' ability to make backups and autosaves since its annoying and too bloated
   #+BEGIN_SRC emacs-lisp
     (setq make-backup-files nil)
     (setq auto-save-default nil)
   #+END_SRC
*** Remove trailing whitespace on save
#+begin_src emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src
*** Default to UTF-8 encoding
#+begin_src emacs-lisp
(set-default-coding-systems 'utf-8)
(set-language-environment "UTF-8")
(prefer-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
#+end_src
*** Force Emacs to always follow symlinks by default
#+begin_src emacs-lisp
  ;; NOTE:
  ;; Taken from this StackOverflow post:
  ;; https://stackoverflow.com/questions/15390178/emacs-and-symbolic-links
  (setq vc-follow-symlinks t)
#+end_src
*** Force Emacs to copy to Windows based clipboard via 'wl-copy' workaround for WSL2
#+begin_src emacs-lisp
  ;; Taken from here:
  ;; https://github.com/microsoft/wslg/issues/15
  (when (and (getenv "WAYLAND_DISPLAY") (not (equal (getenv "GDK_BACKEND") "x11")))
    (setq
     interprogram-cut-function
     (lambda (text)
       ;; strangest thing: gui-select-text leads to gui-set-selection 'CLIPBOARD
       ;; text -- if I eval that with some string, it mostly lands on the wayland
       ;; clipboard, but not when it's invoked from this context.
       ;; (gui-set-selection 'CLIPBOARD text)
       ;; without the charset=utf-8 in type, emacs / wl-copy will crash when you paste emojis into a windows app
       (start-process "wl-copy" nil "wl-copy" "--trim-newline" "--type" "text/plain;charset=utf-8"  text))))
#+end_src
